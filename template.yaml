AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  actual-leave-abhijeet

  Sample SAM Template for actual-leave-abhijeet

Parameters:
  JwtSecret:
    Type: String
    Description: JWT Secret for token authorization
    NoEcho: true

Globals:
  Function:
    Timeout: 15
    LoggingConfig:
      LogFormat: JSON

Resources:
  LeaveTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LeaveApprovalAbhijeet
      AttributeDefinitions:
        - AttributeName: requestId
          AttributeType: S
      KeySchema:
        - AttributeName: requestId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  

  LeaveAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: LeaveManagementAPI
      StageName: Prod
      Cors: "'*'"
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: Leave Management API
          description: API for managing leave requests and approvals.
          version: 1.0.0
        paths:
          /apply-leave:
            post:
              summary: Apply for leave
              description: Submits a new leave request.
              tags:
                - Leave Management
              security:
                - bearerAuth: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/LeaveRequest'
              responses:
                '200':
                  description: Leave request submitted successfully
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/LeaveResponse'
                '400':
                  description: Invalid request data
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                '401':
                  description: Unauthorized - Invalid or missing token
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitLeaveFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /process-approval:
            get:
              summary: Process leave approval
              description: Processes the approval or rejection of a leave request.
              tags:
                - Leave Management
              security: []
              parameters:
                - name: requestId
                  in: query
                  required: true
                  schema:
                    type: string
                - name: action
                  in: query
                  required: true
                  schema:
                    type: string
                    enum: [approve, reject]
                - name: taskToken
                  in: query
                  required: true
                  schema:
                    type: string
                - name: token
                  in: query
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Approval processed successfully
                  content:
                    text/html:
                      schema:
                        type: string
                '400':
                  description: Missing or invalid parameters
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                '401':
                  description: Unauthorized - Invalid token
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessApprovalFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
        components:
          securitySchemes:
            bearerAuth:
              type: http
              scheme: bearer
              bearerFormat: JWT
          schemas:
            LeaveRequest:
              type: object
              required:
                - userEmail
                - leaveType
                - startDate
                - endDate
              properties:
                userEmail:
                  type: string
                  example: "user@example.com"
                leaveType:
                  type: string
                  example: "vacation"
                startDate:
                  type: string
                  format: date
                  example: "2023-12-01"
                endDate:
                  type: string
                  format: date
                  example: "2023-12-05"
                reason:
                  type: string
                  example: "Family vacation"
            LeaveResponse:
              type: object
              properties:
                message:
                  type: string
                  example: "Leave applied"
                requestId:
                  type: string
                  example: "LEAVE-1234567890"
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            Error:
              type: object
              properties:
                message:
                  type: string
                  example: "Missing required field: userEmail"
      Auth:
        DefaultAuthorizer: TokenAuthorizer
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Header: Authorization
              ValidationExpression: "^Bearer [-0-9a-zA-Z._]*$"
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - authorizer.ts
    Properties:
      CodeUri: hello-world/
      Handler: authorizer.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - Statement:
            
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret

  SubmitLeaveFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: hello-world/
      Handler: app.applyLeave
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaveTable
       
        - Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref LeaveStateMachine
      Environment:
        Variables:
          TABLE_NAME: !Ref LeaveTable
          SES_EMAIL: "abhijeet.aayush@antstack.io"
          STATE_MACHINE_ARN: !Ref LeaveStateMachine
          APPROVER_EMAIL: "abhijeet.aayush@antstack.io"
          JWT_SECRET: !Ref JwtSecret
      Events:
        ApplyLeave:
          Type: Api
          Properties:
            Path: /apply-leave
            Method: POST
            RestApiId: !Ref LeaveAPI
            Auth:
              Authorizer: TokenAuthorizer

  SendApprovalEmailFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: hello-world/
      Handler: app.sendApprovalEmail
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSESFullAccess
      Environment:
        Variables:
          SES_EMAIL: "abhijeet.aayush@antstack.io"
          APPROVER_EMAIL: "abhijeet.aayush@antstack.io"

  ProcessApprovalFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: hello-world/
      Handler: app.processApproval
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: "*"
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
      Events:
        ProcessApproval:
          Type: Api
          Properties:
            Path: /process-approval
            Method: GET
            RestApiId: !Ref LeaveAPI
            Auth:
              Authorizer: NONE

  NotifyUserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
    Properties:
      CodeUri: hello-world/
      Handler: app.notifyUser
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSESFullAccess
      Environment:
        Variables:
          SES_EMAIL: "abhijeet.aayush@antstack.io"
          APPROVER_EMAIL: "abhijeet.aayush@antstack.io"

  LeaveStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: step-function.asl.json
      DefinitionSubstitutions:
        SendApprovalEmailFunctionArn: !GetAtt SendApprovalEmailFunction.Arn
        NotifyUserFunctionArn: !GetAtt NotifyUserFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref SendApprovalEmailFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref NotifyUserFunction
  